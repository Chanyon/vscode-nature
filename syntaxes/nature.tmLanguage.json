{
  "scopeName": "source.n",
  "fileTypes": [
    ".n"
  ],
  "patterns": [
    {
      "include": "#comments"
    },
    {
      "include": "#operators"
    },
    {
      "include":"#strings"
    },
    {
      "include": "#numbers"
    },
    {
      "include": "#types"
    },
    {
      "include": "#keywords"
    },
    {
      "include": "#variables"
    },
    {
      "include": "#brackets"
    },
    {
      "include":"#import-decl"
    },
    {
      "include": "#module-decl"
    },
    {
      "include": "#illegal-name"
    },
    {
      "include": "#punctuations"
    }
  ],
  "repository": {
    "keywords": {
      "patterns": [
        {
          "name": "keyword.storage.n",
          "match": "\\b(in|break|import|struct|case|else|switch|for|while|type|continue|var|if|return|fn|self|as|is|has|true|false|gen|module|nil)\\b"
        }
      ]
    },
    "types": {
      "patterns": [
        {
					"name": "storage.type.numeric.n",
					"match": "(?<!\\.)\\b(i(8|16|32|nt|64|128|256)|u(8|16|32|int|64|128|256)|f(32|64|80|128)|cptr)\\b"
				},
				{
					"name": "storage.type.$1.n",
					"match": "(?<!\\.)\\b(bool|string|any|null|cptr|nil)\\b"
				}
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.comparison.n",
          "match": "(==|!=|<=|>=|<|>)"
        },
        {
          "name": "keyword.operator.arithmetic.n",
          "match": "((\\+|-|\\*|/|\\%)=?|(\\+\\+|--))"
        },
        {
          "name": "keyword.operator.logical.n",
          "match": "(!|&&|\\|\\|)"
        },
        {
          "name": "keyword.operator.assignment.n",
          "match": "(:=|=)"
        },
          {
          "name": "keyword.operator.bitwise.n",
          "match": "((<<|>>|&|\\^|\\|)=?)"
        }
      ]
    },
    "variables": {
      "patterns": [
        {
          "name": "meta.variable.n",
          "patterns": [
            {
              "name": "variable.constant.n",
              "match": "\\b[_A-Z][_A-Z0-9]+\\b"
            },
            {
              "name": "variable.n",
              "match": "\\b[_a-zA-Z][_a-zA-Z0-9]*\\b"
            },
            {
              "name": "entity.name.type.n",
              "match": "\\b[A-Z][a-zA-Z0-9]*\\b"
            }
          ]
        },
        {
          "name": "meta.function.call.n",
          "patterns": [
            {
              "name": "entity.name.function.n",
              "match": "([A-Z][a-zA-Z0-9]*)(?=\\s*\\{)"
            },
            {
              "name": "entity.name.function.n",
              "match": "([A-Z][a-zA-Z0-9]*)(?=\\s*\\()"
            },
            {
              "name": "entity.name.function.n",
              "match": "([_a-zA-Z][_a-zA-Z0-9]*)(?=\\s*\\{)"
            },
            {
              "name": "entity.name.function.n",
              "match": "([_a-zA-Z][_a-zA-Z0-9]*)(?=\\s*\\()"
            }
          ]
        },
        {
          "name": "meta.function.declaration.n",
          "patterns": [
            {
              "match": "\\b(fn)\\s+([A-Z][a-zA-Z0-9]*)\\b",
              "captures": {
                "1": {
                  "name": "storage.type.function.n"
                },
                "2": {
                  "name": "entity.name.function.n"
                }
              }
            },
            {
              "match": "\\b(fn)\\s+([_a-zA-Z][_a-zA-Z0-9]*)\\b",
              "captures": {
                "1": {
                  "name": "storage.type.function.n"
                },
                "2": {
                  "name": "entity.name.function.n"
                }
              }
            }
          ]
        }
      ]
    },
    "comments": {
      "patterns": [
        {
          "name": "comment.line.double-slash.n",
          "begin": "//",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.comment.begin.n"
            }
          },
          "end": "$"
        },
        {
          "name": "comment.block.documentation.n",
          "begin": "/\\*",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.comment.begin.n"
            }
          },
          "end": "\\*/",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.comment.end.n"
            }
          },
          "patterns": [
            {
              "include": "#comments"
            }
          ]
        }
      ]
    },
    "brackets": {
			"patterns": [
				{
					"begin": "{",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.bracket.curly.begin.n"
						}
					},
					"end": "}",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.bracket.curly.end.n"
						}
					},
					"patterns": [
						{
							"include": "$self"
						}
					]
				},
				{
					"begin": "\\(",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.bracket.round.begin.n"
						}
					},
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.bracket.round.end.n"
						}
					},
					"patterns": [
						{
							"include": "$self"
						}
					]
				},
				{
					"begin": "\\[",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.bracket.square.begin.n"
						}
					},
					"end": "\\]",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.bracket.square.end.n"
						}
					},
					"patterns": [
						{
							"include": "$self"
						}
					]
				}
			]
		},
    "generic": {
			"patterns": [
				{
					"name": "meta.definition.generic.n",
					"match": "(?<=[\\w\\s+])(\\<)(\\w+)(\\>)",
					"captures": {
						"1": {
							"name": "punctuation.definition.bracket.angle.begin.n"
						},
						"2": {
							"patterns": [
								{
									"include": "#illegal-name"
								},
								{
									"match": "\\w+",
									"name": "entity.name.generic.n"
								}
							]
						},
						"3": {
							"name": "punctuation.definition.bracket.angle.end.n"
						}
					}
				}
			]
		},
    "import-decl": {
			"name": "meta.import.n",
			"begin": "^\\s*(import)\\s+",
			"beginCaptures": {
				"1": {
					"name": "keyword.import.n"
				}
			},
			"end": "([\\w.]+)",
			"endCaptures": {
				"1": {
					"name": "entity.name.import.n"
				}
			}
		},
    "module-decl": {
			"name": "meta.module.n",
			"begin": "^\\s*(module)\\s+",
			"beginCaptures": {
				"1": {
					"name": "keyword.module.n"
				}
			},
			"end": "([\\w.]+)",
			"endCaptures": {
				"1": {
					"name": "entity.name.module.n"
				}
			}
		},
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.double.n",
          "begin": "\"",
          "end": "\"",
          "patterns":[
            {"include":"#stringcontent"}
          ]
        }
      ]
    },
    "stringcontent": {
      "patterns": [
        {
          "name": "constant.character.escape.n",
          "match": "\\\\([nrt'\"\\\\]|(x[0-9a-fA-F]{2})|(u\\{[0-9a-fA-F]+\\}))"
        },
        {
          "name": "invalid.illegal.unrecognized-string-escape.n",
          "match": "\\\\."
        }
      ]
    },
    "numbers": {
      "patterns": [
        {
					"name": "constant.numeric.exponential.n",
					"match": "([0-9]+(_?))+(\\.)([0-9]+[eE][-+]?[0-9]+)"
				},
				{
					"name": "constant.numeric.float.n",
					"match": "([0-9]+(_?))+(\\.)([0-9]+)"
				},
				{
					"name": "constant.numeric.binary.n",
					"match": "(?:0b)(?:(?:[0-1]+)(?:_?))+"
				},
				{
					"name": "constant.numeric.octal.n",
					"match": "(?:0o)(?:(?:[0-7]+)(?:_?))+"
				},
				{
					"name": "constant.numeric.hex.n",
					"match": "(?:0x)(?:(?:[0-9a-fA-F]+)(?:_?))+"
				},
				{
					"name": "constant.numeric.integer.n",
					"match": "(?:(?:[0-9]+)(?:[_]?))+"
				}
      ]
    },
    "punctuations": {
			"patterns": [
				{
					"name": "punctuation.accessor.n",
					"match": "(?:\\.)"
				},
				{
					"name": "punctuation.separator.comma.n",
					"match": "(?:,)"
				}
			]
		},
    "illegal-name": {
			"match": "\\d\\w+",
			"name": "invalid.illegal.n"
		}
  }
}